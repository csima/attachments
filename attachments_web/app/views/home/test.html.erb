<html>
  <head>
    <script type="text/javascript">
      // Your Client ID can be retrieved from your project in the Google
      // Developer Console, https://console.developers.google.com
      var CLIENT_ID = '518366790721-81mdsr326q9uq0iq0agr9c69dgchergq.apps.googleusercontent.com';
      var SCOPES = ['https://www.googleapis.com/auth/gmail.readonly'];
      var FS;

      /**
       * Check if current user has authorized this application.
       */
      function checkAuth() {
	    setupChromeFilesystem();

        gapi.auth.authorize(
          {
            'client_id': CLIENT_ID,
            'scope': SCOPES.join(' '),
            'immediate': true
          }, handleAuthResult);
      }

      /**
       * Handle response from authorization server.
       *
       * @param {Object} authResult Authorization result.
       */
      function handleAuthResult(authResult) {
        var authorizeDiv = document.getElementById('authorize-div');
        if (authResult && !authResult.error) {
          // Hide auth UI, then load client library.
          authorizeDiv.style.display = 'none';
          loadGmailApi();
        } else {
          // Show auth UI, allowing the user to initiate authorization by
          // clicking authorize button.
          authorizeDiv.style.display = 'inline';
        }
      }

      /**
       * Initiate auth flow in response to user clicking authorize button.
       *
       * @param {Event} event Button click event.
       */
      function handleAuthClick(event) {
        gapi.auth.authorize(
          {client_id: CLIENT_ID, scope: SCOPES, immediate: false},
          handleAuthResult);
        return false;
      }

      /**
       * Load Gmail API client library. List labels once client library
       * is loaded.
       */
      function loadGmailApi() {
        //gapi.client.load('gmail', 'v1', listLabels);
        gapi.client.load('gmail', 'v1', bleh);
      }

	  function test_messages(result) {
		 var messageids = result;
		 
		 for (i = 0; i < messageids.length; i++) {
			 console.log("grabbed message");

			 getMessage('me', messageids[i]['id'], function(result) {
				 getAttachments('me', result, function(filename, mimeType, attachment) {
					 console.log(attachment);
					 saveFile(filename, attachment['data'], mimeType);
				 })
			 })
		 }
		  //appendPre(result);
	  }
	  
	  function getAttachments(userId, message, callback) {
		  var parts = message.payload.parts;
		  for (var i = 0; i < parts.length; i++) {
		    var part = parts[i];
		    if (part.filename && part.filename.length > 0) {
		      var attachId = part.body.attachmentId;
		      var request = gapi.client.gmail.users.messages.attachments.get({
		        'id': attachId,
		        'messageId': message.id,
		        'userId': userId
		      });
		      request.execute(function(attachment) {
		        callback(part.filename, part.mimeType, attachment);
		      });
		      break;
		    }
		  }
		}
		
	  function getMessage(userId, messageId, callback) {
		  var request = gapi.client.gmail.users.messages.get({
		    'userId': userId,
		    'id': messageId
		  });
		  request.execute(callback);
	  } 
      /**
       * Print all Labels in the authorized user's inbox. If no labels
       * are found an appropriate message is printed.
       */
      function listLabels() {
        var request = gapi.client.gmail.users.labels.list({
          'userId': 'me'
        });

        request.execute(function(resp) {
          var labels = resp.labels;
          appendPre('Labels:');

          if (labels && labels.length > 0) {
            for (i = 0; i < labels.length; i++) {
              var label = labels[i];
              appendPre(label.name);
            }
          } else {
            appendPre('No Labels found.');
          }
        });
      }

	function bleh() {
		listMessages('me','has:attachment',test_messages);
	}
	
	function listMessages(userId, query, callback) {
	  var getPageOfMessages = function(request, result) {
	    request.execute(function(resp) {
	      result = result.concat(resp.messages);
	      console.log('got here');
	      var nextPageToken = resp.nextPageToken;
	      callback(result);
	      /*
	      if (nextPageToken) {
	        request = gapi.client.gmail.users.messages.list({
	          'userId': userId,
	          'pageToken': nextPageToken,
	          'q': query
	        });
	        getPageOfMessages(request, result);
	      } else {
	        callback(result);
	      }*/
	    });
	  };
	  var initialRequest = gapi.client.gmail.users.messages.list({
	    'userId': userId,
	    'q': query
	  });
	  getPageOfMessages(initialRequest, []);
	}

	function setupChromeFilesystem() {
		window.webkitStorageInfo.requestQuota(PERSISTENT, 1000*1024*1024, function(grantedBytes) {
		  window.requestFileSystem = window.requestFileSystem || window.webkitRequestFileSystem;
		  window.requestFileSystem(PERSISTENT, grantedBytes, onInitFs, errorHandler);

		}, function(e) {
		  console.log('Error', e);
		});
	}
	
	function onInitFs(fs) {
		  console.log('Opened file system: ' + fs.name);
		  console.log(fs);
		  FS = fs;
	}
	
	function saveFile(filename, data, contentType) {
		console.log("Saving: " + filename)
		FS.root.getDirectory("attachments", {create: true}, function(directory){

			directory.getFile(filename, {create: true}, function(fileEntry) {
		
		    // Create a FileWriter object for our FileEntry (log.txt).
		    fileEntry.createWriter(function(fileWriter) {
		
		      fileWriter.onwriteend = function(e) {
		        console.log('Write completed.');
		      };
		
		      fileWriter.onerror = function(e) {
		        console.log('Write failed: ' + e.toString());
		      };
		
		      // Create a new Blob and write it to log.txt.
				var text_b46data = urlsafeb64_to_b64(data);
				var blob = b64toBlob(text_b46data, contentType);

		      //var blob = new Blob(['Lorem Ipsum'], {type: 'text/plain'});
		
		      fileWriter.write(blob);
			  console.log('Saved ' + filename);
		    }, errorHandler);
		
		  }, errorHandler);
	  }, errorHandler);
	}
	
	function errorHandler(e) {
	  var msg = '';
	
	  switch (e.code) {
	    case FileError.QUOTA_EXCEEDED_ERR:
	      msg = 'QUOTA_EXCEEDED_ERR';
	      break;
	    case FileError.NOT_FOUND_ERR:
	      msg = 'NOT_FOUND_ERR';
	      break;
	    case FileError.SECURITY_ERR:
	      msg = 'SECURITY_ERR';
	      break;
	    case FileError.INVALID_MODIFICATION_ERR:
	      msg = 'INVALID_MODIFICATION_ERR';
	      break;
	    case FileError.INVALID_STATE_ERR:
	      msg = 'INVALID_STATE_ERR';
	      break;
	    default:
	      msg = 'Unknown Error';
	      break;
	  };
	
	  console.log('Error: ' + msg);
	}

function urlsafeb64_to_b64(s) {
  // Replace - with + and _ with /
  return s.replace(/-/g, '+').replace(/_/g, '/');
}

function b64toBlob(b64Data, contentType, sliceSize) {
    contentType = contentType || '';
    sliceSize = sliceSize || 512;

    var byteCharacters = atob(b64Data);
    var byteArrays = [];

    for (var offset = 0; offset < byteCharacters.length; offset += sliceSize) {
        var slice = byteCharacters.slice(offset, offset + sliceSize);

        var byteNumbers = new Array(slice.length);
        for (var i = 0; i < slice.length; i++) {
            byteNumbers[i] = slice.charCodeAt(i);
        }

        var byteArray = new Uint8Array(byteNumbers);

        byteArrays.push(byteArray);
    }

    var blob = new Blob(byteArrays, {type: contentType});
    return blob;
}

      /**
       * Append a pre element to the body containing the given message
       * as its text node.
       *
       * @param {string} message Text to be placed in pre element.
       */
      function appendPre(message) {
        var pre = document.getElementById('output');
        var textContent = document.createTextNode(message + '\n');
        pre.appendChild(textContent);
      }

    </script>
    <script src="https://apis.google.com/js/client.js?onload=checkAuth">
    </script>
  </head>
  <body>
    <div id="authorize-div" style="display: none">
      <span>Authorize access to Gmail API</span>
      <!--Button for the user to click to initiate auth sequence -->
      <button id="authorize-button" onclick="handleAuthClick(event)">
        Authorize
      </button>
    </div>
    <pre id="output"></pre>
  </body>
</html>